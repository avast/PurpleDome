# -*- mode: ruby -*-
# vi: set ft=ruby :

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure("2") do |config|

    # Use the virtualbox provider with some common settings
  config.vm.provider "virtualbox" do |v|
    # Workaround Ubuntu 16.04 issue with Virtualbox where Box waits 5 minutes to start if network "cable" is not connected.
    # https://github.com/chef/bento/issues/682
    #v.customize ["modifyvm", :id, "--cableconnected1", "on"]
    # Change network card to PCnet-FAST III
    # For NAT adapter
    #v.customize ["modifyvm", :id, "--nictype1", "Am79C973"]

  end

	config.vm.define "target1" do |target1|
	  # The most common configuration options are documented and commented below.
	  # For a complete reference, please see the online documentation at
	  # https://docs.vagrantup.com.

	  # Every Vagrant development environment requires a box. You can search for
	  # boxes at https://vagrantcloud.com/search.
	  target1.vm.box = "hashicorp/bionic64"
	  # target.vm.base_mac = "080027BB1475"
	  target1.vm.hostname = "target1"
	  target1.vm.define "target1"

	  #target1.vm.synced_folder ".", "/vagrant"


	  # Disable automatic box update checking. If you disable this, then
	  # boxes will only be checked for updates when the user runs
	  # `vagrant box outdated`. This is not recommended.
	  # config.vm.box_check_update = false

	  # Create a forwarded port mapping which allows access to a specific port
	  # within the machine from a port on the host machine. In the example below,
	  # accessing "localhost:8080" will access port 80 on the guest machine.
	  # NOTE: This will enable public access to the opened port
	  # config.vm.network "forwarded_port", guest: 80, host: 8080

	  # Create a forwarded port mapping which allows access to a specific port
	  # within the machine from a port on the host machine and only allow access
	  # via 127.0.0.1 to disable public access
	  # config.vm.network "forwarded_port", guest: 80, host: 8080, host_ip: "127.0.0.1"

	  # Create a private network, which allows host-only access to the machine
	  # using a specific IP.
	  # config.vm.network "private_network", ip: "192.168.33.10"

	  # Create a public network, which generally matched to bridged network.
	  # Bridged networks make the machine appear as another physical device on
	  # your network.
	  target1.vm.network "public_network", bridge: "enp4s0"

	  # Share an additional folder to the guest VM. The first argument is
	  # the path on the host to the actual folder. The second argument is
	  # the path on the guest to mount the folder. And the optional third
	  # argument is a set of non-required options.
	  # config.vm.synced_folder "../data", "/vagrant_data"

	  # Provider-specific configuration so you can fine-tune various
	  # backing providers for Vagrant. These expose provider-specific options.
	  # Example for VirtualBox:
	  #
	  # config.vm.provider "virtualbox" do |vb|
	  #   # Display the VirtualBox GUI when booting the machine
	  #   vb.gui = true
	  #
	  #   # Customize the amount of memory on the VM:
	  #   vb.memory = "1024"
	  # end
	  #
	  # View the documentation for the provider you are using for more
	  # information on available options.

	  # Enable provisioning with a shell script. Additional provisioners such as
	  # Puppet, Chef, Ansible, Salt, and Docker are also available. Please see the
	  # documentation for more information about their specific syntax and use.
	  target1.vm.provision "shell", inline: <<-SHELL
	  ls /vagrant
	  cd /vagrant/target1
	  chmod +x bootstrap.sh
	  ./bootstrap.sh

	  # Install implant
	  chmod +x hackme.sh
	  ./hackme.sh

	  SHELL
	end

	#########

    # Windows target
	config.vm.define "target2" do |target2|
	    target2.vm.box = "windows10_64"
        #target2.vm.base_mac = "080027BB1475"
        #target2.vm.hostname = "target2w"
        #target2.vm.define "target2w"

        target2.vm.network "public_network", bridge: "enp4s0"

        target2.vm.communicator = "winssh"
        target2.winssh.shell ="cmd"

        target2.vm.provider "virtualbox" do |vb2|
          #   # Display the VirtualBox GUI when booting the machine
             vb2.gui = true
          #
          #   # Customize the amount of memory on the VM:
          #   vb.memory = "1024"
        end

        # Sync
        target2.vm.synced_folder ".", "/vagrant", disabled: true

        # config.vm.boot_timeout

        target2.ssh.username = "PURPLEDOME"
        target2.ssh.private_key_path = "target2w/id_rsa.3"

	end

	########################

	config.vm.define "target3" do |target3|
	  # The most common configuration options are documented and commented below.
	  # For a complete reference, please see the online documentation at
	  # https://docs.vagrantup.com.

	  # Every Vagrant development environment requires a box. You can search for
	  # boxes at https://vagrantcloud.com/search.
	  target3.vm.box = "ubuntu/impish64"
	  # target.vm.base_mac = "080027BB1475"
	  target3.vm.hostname = "target3"
	  target3.vm.define "target3"

	  target3.vm.synced_folder ".", "/vagrant"

	  target3.vm.provider "virtualbox" do |v|
	    v.memory = 2048
	    v.cpus = 4
    end


	  # Disable automatic box update checking. If you disable this, then
	  # boxes will only be checked for updates when the user runs
	  # `vagrant box outdated`. This is not recommended.
	  # config.vm.box_check_update = false

	  # Create a forwarded port mapping which allows access to a specific port
	  # within the machine from a port on the host machine. In the example below,
	  # accessing "localhost:8080" will access port 80 on the guest machine.
	  # NOTE: This will enable public access to the opened port
	  # config.vm.network "forwarded_port", guest: 80, host: 8080

	  # Create a forwarded port mapping which allows access to a specific port
	  # within the machine from a port on the host machine and only allow access
	  # via 127.0.0.1 to disable public access
	  # config.vm.network "forwarded_port", guest: 80, host: 8080, host_ip: "127.0.0.1"

	  # Create a private network, which allows host-only access to the machine
	  # using a specific IP.
	  # config.vm.network "private_network", ip: "192.168.33.10"
	  # target3.vm.network :private_network, ip: '192.168.178.163'

	  # Create a public network, which generally matched to bridged network.
	  # Bridged networks make the machine appear as another physical device on
	  # your network.
	  target3.vm.network "public_network", bridge: "enp4s0"

	  # Share an additional folder to the guest VM. The first argument is
	  # the path on the host to the actual folder. The second argument is
	  # the path on the guest to mount the folder. And the optional third
	  # argument is a set of non-required options.
	  # config.vm.synced_folder "../data", "/vagrant_data"

	  # Provider-specific configuration so you can fine-tune various
	  # backing providers for Vagrant. These expose provider-specific options.
	  # Example for VirtualBox:
	  #
	  # config.vm.provider "virtualbox" do |vb|
	  #   # Display the VirtualBox GUI when booting the machine
	  #   vb.gui = true
	  #
	  #   # Customize the amount of memory on the VM:
	  #   vb.memory = "1024"
	  # end
	  #
	  # View the documentation for the provider you are using for more
	  # information on available options.

	  # Enable provisioning with a shell script. Additional provisioners such as
	  # Puppet, Chef, Ansible, Salt, and Docker are also available. Please see the
	  # documentation for more information about their specific syntax and use.
	  target3.vm.provision "shell", inline: <<-SHELL
	  ls /vagrant
	  cd /vagrant/target3
	  chmod +x bootstrap.sh
	  sudo ./bootstrap.sh

	  # Install implant
	  #chmod +x hackme.sh
	  #./hackme.sh

	  SHELL
	end

#####################################################

	config.vm.define "attacker" do |attacker|
	 # The most common configuration options are documented and commented below.
	  # For a complete reference, please see the online documentation at
	  # https://docs.vagrantup.com.

	  # Every Vagrant development environment requires a box. You can search for
	  # boxes at https://vagrantcloud.com/search.

	  # https://app.vagrantup.com/kalilinux/boxes/rolling
	  attacker.vm.box = "kalilinux/rolling"
	  attacker.vm.box_version = "2021.3.0"
	  #config.vm.base_mac = "080027BB1476"
	  attacker.vm.hostname = "attacker"


	  # Disable automatic box update checking. If you disable this, then
	  # boxes will only be checked for updates when the user runs
	  # `vagrant box outdated`. This is not recommended.
	  # config.vm.box_check_update = false

	  # Create a forwarded port mapping which allows access to a specific port
	  # within the machine from a port on the host machine. In the example below,
	  # accessing "localhost:8080" will access port 80 on the guest machine.
	  # NOTE: This will enable public access to the opened port
	  # config.vm.network "forwarded_port", guest: 80, host: 8080

	  # Create a forwarded port mapping which allows access to a specific port
	  # within the machine from a port on the host machine and only allow access
	  # via 127.0.0.1 to disable public access
	  # config.vm.network "forwarded_port", guest: 80, host: 8080, host_ip: "127.0.0.1"

	  # Create a private network, which allows host-only access to the machine
	  # using a specific IP.
	  # config.vm.network "private_network", ip: "192.168.33.10"

	  # Create a public network, which generally matched to bridged network.
	  # Bridged networks make the machine appear as another physical device on
	  # your network.
	  attacker.vm.network "public_network", bridge: "enp4s0"

	  # Share an additional folder to the guest VM. The first argument is
	  # the path on the host to the actual folder. The second argument is
	  # the path on the guest to mount the folder. And the optional third
	  # argument is a set of non-required options.
	  # config.vm.synced_folder "../data", "/vagrant_data"

	  # Provider-specific configuration so you can fine-tune various
	  # backing providers for Vagrant. These expose provider-specific options.
	  # Example for VirtualBox:
	  #
	  #config.vm.provider "virtualbox" do |vb|
	  #   # Display the VirtualBox GUI when booting the machine
	  #   vb.gui = true
	  #
	  #   # Customize the amount of memory on the VM:
	  #   vb.memory = "2048"
	  # end
	  #
	  # View the documentation for the provider you are using for more
	  # information on available options.

	  # Enable provisioning with a shell script. Additional provisioners such as
	  # Puppet, Chef, Ansible, Salt, and Docker are also available. Please see the
	  # documentation for more information about their specific syntax and use.
	  attacker.vm.provision "shell", inline: <<-SHELL
	  echo "Attacker1 inline script start"
	  ls /vagrant
	  cd /vagrant/attacker1
	  chmod +x bootstrap.sh
	  sudo ./bootstrap.sh
	  echo "Attacker ready"

	  SHELL
	end


end
